{"version":3,"sources":["components/Input/Input.js","components/Heading/H1.js","components/Button/Button.js","components/Button/PrimaryBtn.js","components/Button/SecondaryBtn.js","containers/Login/Login.js","components/Button/OutlineBtn.js","components/Navbar/Navbar.js","containers/Admin/Dashboard.js","containers/Admin/Student.js","containers/Admin/Course.js","containers/Admin/Home.js","App.js","serviceWorker.js","index.js"],"names":["Input","text","focus","Fragment","InputGroup","className","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","autoFocus","H1","ButtonWrap","variant","onClick","Button","PrimaryBtn","SecondaryBtn","Login","setIsAuthenticated","OutlineButton","NavbarWrap","setCurrentPage","Navbar","bg","Brand","href","Nav","Link","Form","inline","type","style","color","Dashboard","Student","Course","Home","useState","currentPage","getPage","App","isAuthenticated","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.556eb008.chunk.js","sourcesContent":["import React from 'react';\r\nimport { InputGroup, FormControl } from '../BootstrapWrap';\r\n\r\nconst Input = ({ text, focus }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <InputGroup className='mb-3'>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text id='basic-addon1'>{text}</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl placeholder='Username' aria-label='Username' aria-describedby='basic-addon1' autoFocus={focus} />\r\n      </InputGroup>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\n\r\nconst H1 = ({ text }) => {\r\n  return <h1>{text}</h1>;\r\n};\r\n\r\nexport default H1;\r\n","import React from 'react';\r\n\r\nimport { Button } from '../BootstrapWrap';\r\n\r\nconst ButtonWrap = ({ variant, text, className, onClick }) => {\r\n  return (\r\n    <Button variant={variant} className={className} onClick={onClick}>\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ButtonWrap;\r\n","import React from 'react';\r\n\r\nimport Button from './Button';\r\n\r\nconst PrimaryBtn = ({ text, onClick }) => {\r\n  return <Button variant='primary' text={text} onClick={onClick} />;\r\n};\r\n\r\nexport default PrimaryBtn;\r\n","import React from 'react';\r\n\r\nimport Button from './Button';\r\n\r\nconst SecondaryBtn = ({ text }) => {\r\n  return <Button variant='secondary' text={text} className='ml-4' />;\r\n};\r\n\r\nexport default SecondaryBtn;\r\n","import React from 'react';\r\nimport { Input, H1, PrimaryBtn, SecondaryBtn } from '../../components';\r\n\r\nimport './Login.css';\r\n\r\nconst Login = ({ setIsAuthenticated }) => {\r\n  return (\r\n    <div className='login'>\r\n      <H1 text='Please Login' />\r\n      <Input text='Username' focus={true} />\r\n      <Input text='Password' />\r\n      <PrimaryBtn\r\n        text='Login'\r\n        onClick={() => {\r\n          setIsAuthenticated(true);\r\n        }}\r\n      />\r\n      <SecondaryBtn text='Reset' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nimport Button from './Button';\r\n\r\nconst OutlineButton = ({ text, onClick }) => {\r\n  return <Button variant='outline-light' text={text} onClick={onClick} />;\r\n};\r\n\r\nexport default OutlineButton;\r\n","import React from 'react';\r\n\r\nimport { Navbar, Nav, Form, FormControl } from '../BootstrapWrap';\r\nimport OutlineButton from '../Button/OutlineBtn';\r\n\r\nconst NavbarWrap = ({ setIsAuthenticated, setCurrentPage }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Navbar bg='primary' variant='dark'>\r\n        <Navbar.Brand href='#home'>Navbar</Navbar.Brand>\r\n        <Nav className='mr-auto'>\r\n          <Nav.Link href='#home' onClick={() => setCurrentPage(1)}>\r\n            Home\r\n          </Nav.Link>\r\n          <Nav.Link href='#courses' onClick={() => setCurrentPage(2)}>\r\n            Courses\r\n          </Nav.Link>\r\n          <Nav.Link href='#students' onClick={() => setCurrentPage(3)}>\r\n            Students\r\n          </Nav.Link>\r\n        </Nav>\r\n        <Form inline>\r\n          <FormControl type='text' placeholder='Search' className='mr-sm-2' />\r\n          <OutlineButton variant='outline-light' text='Search' />\r\n        </Form>\r\n        <Nav.Link href='/' style={{ color: 'white' }} onClick={() => setIsAuthenticated(false)}>\r\n          Logout\r\n        </Nav.Link>\r\n      </Navbar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NavbarWrap;\r\n","import React from 'react';\r\n\r\nconst Dashboard = () => {\r\n  return <div>Dashboard</div>;\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\n\r\nconst Student = () => {\r\n  return <div>Student</div>;\r\n};\r\n\r\nexport default Student;\r\n","import React from 'react';\r\n\r\nconst Course = () => {\r\n  return <div>Course</div>;\r\n};\r\n\r\nexport default Course;\r\n","import React, { useState } from 'react';\r\n\r\nimport NavbarWrap from '../../components/Navbar/Navbar';\r\nimport Dashboard from './Dashboard';\r\nimport Student from './Student';\r\nimport Course from './Course';\r\n\r\nconst Home = ({ setIsAuthenticated }) => {\r\n  const [ currentPage, setCurrentPage ] = useState(1);\r\n\r\n  const getPage = () => {\r\n    switch (currentPage) {\r\n      case 1:\r\n        return <Dashboard />;\r\n      case 2:\r\n        return <Course />;\r\n      case 3:\r\n        return <Student />;\r\n      default:\r\n        return <Dashboard />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <NavbarWrap setIsAuthenticated={setIsAuthenticated} setCurrentPage={setCurrentPage} />\r\n      {getPage()\r\n      // props.children\r\n      }\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from 'react';\nimport Login from './containers/Login/Login';\nimport AdminHome from './containers/Admin/Home';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  const [ isAuthenticated, setIsAuthenticated ] = useState(false);\n\n  return (\n    <div className='App'>\n      {isAuthenticated ? (\n        <AdminHome setIsAuthenticated={setIsAuthenticated} />\n      ) : (\n        <Login setIsAuthenticated={setIsAuthenticated} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}